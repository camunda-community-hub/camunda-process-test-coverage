{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>This Camunda Platform 7 and Platform 8 community extension visualises test process paths and checks your process model coverage ratio. Running  typical JUnit tests now leaves html files in your build output. Just open one and check yourself what your test did:</p> <p></p>"},{"location":"index.html#highlights","title":"Highlights","text":"<ul> <li>Visually verify the paths covered by individual tests methods and whole test classes</li> <li>Visually check gateway expressions and transaction borders (save points) used by your process</li> <li>Calculate and verify the nodes (and sequence flow) coverage ratio reached by tests methods and classes.</li> </ul>"},{"location":"index.html#quick-start","title":"Quick Start","text":"<p>If you just want to start using the library, please consult our Getting Started guide.</p>"},{"location":"index.html#user-guide","title":"User Guide","text":"<p>If you have any questions regarding configuration and usage, please conduct the User Guide.</p>"},{"location":"index.html#contribution","title":"Contribution","text":"<p>If you want to contribute to this project, feel free to do so. Start with Contributing guide.</p>"},{"location":"getting-started.html","title":"Getting started","text":""},{"location":"getting-started.html#install-dependency","title":"Install Dependency","text":"<p>The library supports multiple execution platforms for the test and multiple process engines, so we supply different artifacts which you need to add to your project dependencies:</p> <p>Please define the version of the library using properties like this:</p> <pre><code>&lt;properties&gt;\n  &lt;camunda-process-test-coverage.version&gt;2.7.1-SNAPSHOT&lt;/camunda-process-test-coverage.version&gt;\n&lt;/properties&gt;\n</code></pre>"},{"location":"getting-started.html#junit4-only-platform-7","title":"JUnit4 (only Platform 7)","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-process-test-coverage-junit4-platform-7&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started.html#junit5-platform-7-or-platform-8","title":"JUnit5 (Platform 7 or Platform 8)","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-process-test-coverage-junit5-platform-7&lt;/artifactId&gt;\n  &lt;!-- &lt;artifactId&gt;camunda-process-test-coverage-junit5-platform-8&lt;/artifactId&gt; --&gt;\n  &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started.html#spring-testing-platform-7-or-platform-8","title":"Spring-Testing (Platform 7 or Platform 8)","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-process-test-coverage-spring-test-platform-7&lt;/artifactId&gt;\n  &lt;!-- &lt;artifactId&gt;camunda-process-test-coverage-spring-test-platform-8&lt;/artifactId&gt; --&gt;\n  &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started.html#spring-testing-with-starter-platform-7-or-platform-8","title":"Spring-Testing with starter (Platform 7 or Platform 8)","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-process-test-coverage-starter-platform-7&lt;/artifactId&gt;\n  &lt;!-- &lt;artifactId&gt;camunda-process-test-coverage-starter-platform-8&lt;/artifactId&gt; --&gt;\n  &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>With the <code>starter</code> the further configuration steps are not needed anymore, as everything is auto-configured. This means you have to explicitly exclude all test classes and test methods, that should not be included in the test coverage.</p>"},{"location":"getting-started.html#configuration","title":"Configuration","text":"<p>Use the ProcessCoverageInMemProcessEngineConfiguration, e.g. in your <code>camunda.cfg.xml</code> (only needed for Platform 7)</p>"},{"location":"getting-started.html#junit4-and-junit5","title":"JUnit4 and JUnit5","text":"<pre><code>&lt;bean id=\"processEngineConfiguration\"\n   class=\"org.camunda.community.process_test_coverage.engine.platform7.ProcessCoverageInMemProcessEngineConfiguration\"&gt;\n   ...\n&lt;/bean&gt;\n</code></pre>"},{"location":"getting-started.html#spring-testing","title":"Spring-Testing","text":"<p>Import test configuration to enable coverage in process engine. <pre><code>@Import(ProcessEngineCoverageConfiguration.class)\n</code></pre></p>"},{"location":"getting-started.html#usage","title":"Usage","text":"<p>Wire the process engine in your JUnit test:</p>"},{"location":"getting-started.html#junit4","title":"JUnit4","text":"<p>Use the TestCoverageProcessEngineRule as your process engine JUnit rule</p> <pre><code>@Rule\n@ClassRule\npublic static ProcessEngineRule rule = TestCoverageProcessEngineRuleBuilder.create().build();\n</code></pre>"},{"location":"getting-started.html#junit5","title":"JUnit5","text":"<p>Use the ProcessEngineCoverageExtension as your process engine JUnit extension (available for Platform 7 and Platform 8)</p> <p>Either use <code>@ExtendWith</code></p> <p>Java <pre><code>@ExtendWith(ProcessEngineCoverageExtension.class)\npublic class MyProcessTest\n</code></pre></p> <p>Kotlin <pre><code>@ExtendWith(ProcessEngineCoverageExtension::class)\nclass MyProcessTest\n</code></pre> or <code>@RegisterExtension</code></p> <p>If you register the extension on a non-static field, no class coverage and therefore no report will be generated. This is due to the fact, that an instance of the extension will be created per test method.</p> <p>The extension provides a Builder for programmatic creation, which takes either a path to a configuration resource, a process engine configuration or if nothing is passed uses the default configuration resources path (<code>camunda.cfg.xml</code>).</p> <p>The process engine configuration needs to be configured for test coverage. So use either the provided <code>ProcessCoverageInMemProcessEngineConfiguration</code>, <code>SpringProcessWithCoverageEngineConfiguration</code> or initialize the configuration with <code>ProcessCoverageConfigurator.initializeProcessCoverageExtensions(configuration)</code>.</p> <p>In Java it looks like this: <pre><code>@RegisterExtension\nstatic ProcessEngineCoverageExtension extension = ProcessEngineCoverageExtension\n        .builder().assertClassCoverageAtLeast(0.9).build();\n</code></pre></p> <p>If you prefer Kotlin, this is the way to go: <pre><code>companion object {\n    @JvmField\n    @RegisterExtension\n    var extension: ProcessEngineCoverageExtension = ProcessEngineCoverageExtension\n            .builder(ProcessCoverageInMemProcessEngineConfiguration())\n            .assertClassCoverageAtLeast(1.0).build()\n}\n</code></pre></p>"},{"location":"getting-started.html#spring-testing_1","title":"Spring-Testing","text":"<p>TestExecutionListener is automatically registered. You can exclude test methods or classes from the coverage by annotating them like this</p> <pre><code>@ExcludeFromProcessCoverage\npublic void testWithoutCoverage() {}\n</code></pre>"},{"location":"getting-started.html#running-the-tests","title":"Running the tests","text":"<p>Running your JUnit tests now leaves html files for individual test methods as well as whole test classes in your project's <code>target/process-test-coverage</code> folder. Just open one, check yourself - and have fun with your process tests! :smile:</p>"},{"location":"getting-started.html#aggregating-results","title":"Aggregating results","text":"<p>Normally the results are written for each class under test. For aggregation of the results, there is a maven plugin to do the job. This can be done differently depending on your needs.</p>"},{"location":"getting-started.html#aggregating-reports-in-one-maven-module","title":"Aggregating reports in one maven module","text":"<p>If you just want to aggregate all reports in one maven module, the plugin can be defined in the POM under the build -&gt; plugins section.</p> <pre><code>    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n                &lt;artifactId&gt;camunda-process-test-coverage-report-aggregator-maven-plugin&lt;/artifactId&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;aggregate-reports&lt;/id&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;aggregate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <p>This will activate the plugin in the correct lifecycle and generate an aggregated report in the directory target/process_test_coverage/all (if not otherwise configured).</p>"},{"location":"getting-started.html#aggregating-reports-of-multiple-modules-in-reactor","title":"Aggregating reports of multiple modules in reactor","text":"<p>The plugin will try to collect all reports for the modules in the current reactor. For an example configuration see the pom.xml in the examples directory. Please note, that the plugin needs to run after the tests are run for all modules, therefore the plugin cannot be added to the plugins section in this use case.</p> <p>You can still configure the plugin in the pluginManagement section.</p> <pre><code>    &lt;build&gt;\n        &lt;pluginManagement&gt;\n            &lt;plugins&gt;\n                &lt;plugin&gt;\n                    &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n                    &lt;artifactId&gt;camunda-process-test-coverage-report-aggregator-maven-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n                &lt;/plugin&gt;\n            &lt;/plugins&gt;\n        &lt;/pluginManagement&gt;\n    &lt;/build&gt;\n</code></pre> <p>It can then be invoked by calling mvn camunda-process-test-coverage-report-aggregator:aggregate.</p>"},{"location":"getting-started.html#usage-as-a-reporting-plugin","title":"Usage as a reporting plugin","text":"<p>The plugin can also be used in the site generation. For this to work, the same conditions hold as before. The configuration for this use case looks like this:</p> <pre><code>    &lt;reporting&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n                &lt;artifactId&gt;camunda-process-test-coverage-report-aggregator-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/reporting&gt;\n</code></pre>"},{"location":"getting-started.html#usage-of-the-gradle-plugin","title":"Usage of the gradle plugin","text":"<p>The functionality to aggregate the process test coverage reports is also provided as a gradle plugin. For this to work you have to include the plugin in the gradle build file <code>build.gradle.kts</code>.</p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.camunda.community.process_test_coverage:camunda-process-test-coverage-report-aggregator-gradle-plugin:2.7.1-SNAPSHOT\")\n    }\n}\n\napply(plugin = \"org.camunda.community.process_test_coverage.report-aggregator\")\n</code></pre> <p>Afterwards the reports can be aggregated by calling <code>gradle aggregateProcessTestCoverage</code>.</p>"},{"location":"getting-started.html#sonarqube-plugin","title":"Sonarqube plugin","text":"<p>We also provide a plugin for displaying process test coverage in Sonarqube. This functionality is provided by the artifact:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n  &lt;artifactId&gt;sonar-camunda-process-test-coverage-plugin&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>To install this plugin into Sonarqube please have a look at: https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/install-a-plugin/ Currently we don't provide the plugin via the marketplace, so it has to be manually installed.</p> <p>To get the measures into Sonarqube, you have to include the BPMN files into the sonar input sources. E.g. by calling mvn sonar:sonar -Dsonar.sources=src/main or otherwise including the BPMN files by pattern. Afterwards you'll have a process test coverage measurement on project level and for all BPMN files in your sources. Also the report HTML is included as a page on project level.</p>"},{"location":"developer-guide/contribution.html","title":"How to Contribute","text":"<p>We'd love you to contribute to this project by filing bugs, helping others on the issue tracker, and by contributing features/bug fixes through pull requests.</p> <p>Read more on how to get the project up and running.</p>"},{"location":"developer-guide/contribution.html#creating-issues","title":"Creating Issues","text":"<p>Please use our issue tracker for project communication. When using the issue tracker:</p> <ul> <li>Be descriptive when creating an issue (what, where, when and how does a problem pop up)?</li> <li>Attach steps to reproduce (if applicable)</li> <li>Attach code samples, configuration options or stack traces that may indicate a problem</li> <li>Be helpful and respect others when commenting</li> </ul> <p>Create a pull request if you would like to have an in-depth discussion about some piece of code.</p>"},{"location":"developer-guide/contribution.html#setting-up-the-project-locally","title":"Setting Up the Project Locally","text":"<p>The project is build using Maven 3 as build tool. To build the project by yourself, go to your cmd line and enter <code>mvn clean install</code> on the root of the checked out project.</p> <ol> <li>git clone https://github.com/camunda/camunda-process-test-coverage.git</li> <li>cd camunda-process-test-coverage/</li> <li>mvn clean install</li> </ol>"},{"location":"developer-guide/contribution.html#creating-pull-requests","title":"Creating Pull Requests","text":"<p>We use pull requests for feature discussion and bug fixes. If you are not yet familiar on how to create a pull request, read this great guide.</p> <p>Some things that make it easier for us to accept your pull requests:</p> <ul> <li>Changed code is not reformatted</li> <li>Use four tabs instead of spaces for whitespace</li> <li>The code is tested. Add test cases for the problem you are solving.</li> <li>The <code>mvn clean install</code> build passes including tests</li> <li>The work is combined into a single commit</li> </ul> <p>We'd be glad to assist you if you do not get these things right in the first place.</p>"},{"location":"developer-guide/project-setup.html","title":"Project Setup","text":"<p>If you are interested in developing and building the project please read the following the instructions carefully.</p>"},{"location":"developer-guide/project-setup.html#version-control","title":"Version control","text":"<p>To get sources of the project, please execute:</p> <pre><code>git clone https://github.com/camunda-community-hub/camunda-process-test-coverage.git\ncd camunda-process-test-coverage\n</code></pre> <p>We are using gitflow in our git SCM for naming branches. That means that you should start from <code>develop</code> branch, create a <code>feature/&lt;name&gt;</code> out of it and once it is completed create a pull request containing it. Please squash your commits before submitting and use semantic commit messages, if possible.</p>"},{"location":"developer-guide/project-setup.html#project-build","title":"Project Build","text":"<p>Perform the following steps to get a development setup up and running.</p> <pre><code>./mvnw clean install\n</code></pre>"},{"location":"developer-guide/project-setup.html#regression-tests","title":"Regression Tests","text":"<p>By default, the build command will ignore the run of the regression tests. In order to run the regression tests, please call from your command line:</p> <pre><code>./mvnw -Pregression-test\n</code></pre>"},{"location":"developer-guide/project-setup.html#project-build-modes-and-profiles","title":"Project build modes and profiles","text":""},{"location":"developer-guide/project-setup.html#camunda-version","title":"Camunda Version","text":"<p>The library is compiled against an older version of Camunda (see camunda.compile.version property in parent POM). To select a Camunda version for the tests you can start with a designated profile e.g. camunda-bpm-engine-7.18.</p>"},{"location":"developer-guide/project-setup.html#documentation","title":"Documentation","text":"<p>We are using MkDocs for generation of a static site documentation and rely on markdown as much as possible.</p> <p>Note</p> <p>If you want to develop your docs in 'live' mode, run <code>mkdocs serve</code> and access the http://localhost:8000/ from your browser.</p> <p>For creation of documentation, please run:</p>"},{"location":"developer-guide/project-setup.html#generation-of-javadoc-and-sources","title":"Generation of JavaDoc and Sources","text":"<p>By default, the sources and javadoc API documentation are not generated from the source code. To enable this:</p> <pre><code>./mvnw clean install -Prelease -Dgpg.skip=true\n</code></pre>"},{"location":"developer-guide/project-setup.html#continuous-integration","title":"Continuous Integration","text":"<p>Github Actions are building all branches on commit hook (for codecov). In addition, a Github Actions are used to build PRs and all branches.</p>"},{"location":"developer-guide/project-setup.html#release-management","title":"Release Management","text":"<p>The release is produced by using the github feature to \"Publish a Release\".</p>"},{"location":"developer-guide/project-setup.html#what-modules-get-deployed-to-repository","title":"What modules get deployed to repository","text":"<p>Every Maven module is enabled by default. If you want to change this, please provide the property</p> <pre><code>&lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;\n</code></pre> <p>inside the corresponding <code>pom.xml</code>. Currently, all <code>examples</code> are EXCLUDED from publication into Maven Central.<code></code></p>"},{"location":"user-guide/index.html","title":"Overview","text":"<p>The user guide consists of several sections.</p>"},{"location":"user-guide/index.html#configuration","title":"Configuration","text":"<ul> <li>Configure report directory</li> </ul>"},{"location":"user-guide/index.html#plugins","title":"Plugins","text":"<ul> <li>Sonarqube plugin</li> </ul>"},{"location":"user-guide/configuration.html","title":"Configuration","text":""},{"location":"user-guide/configuration.html#setup-reporting-directory","title":"Setup reporting directory","text":"<p>Optionally, you might configure output path for reports. By default, the reports are written to <code>./target/process-test-coverage/</code>. Depending on your preference there are multiple ways to change this.</p>"},{"location":"user-guide/configuration.html#junit5","title":"JUnit5","text":"<p>When registering the extension programmatically, there is an option to change the report directory. See the following example, that uses the directory build which will typically be used by grade builds.</p> <pre><code>@RegisterExtension\nvar extension: ProcessEngineCoverageExtension = ProcessEngineCoverageExtension.builder()\n    .assertClassCoverageAtLeast(1.0)\n    .reportDirectory(\"build/process-test-coverage\")\n    .build()\n</code></pre>"},{"location":"user-guide/configuration.html#spring-testing","title":"Spring Testing","text":"<p>For the spring test execution listener, the configuration is provided through a configuration in the application context. If a bean of type ProcessEngineCoverageProperties is present in the application context, it will be used for configuration and supports changing the report directory.</p> <pre><code>@Bean\npublic ProcessEngineCoverageProperties processEngineCoverageProperties() {\n    return ProcessEngineCoverageProperties.builder()\n            .assertClassCoverageAtLeast(1.0)\n            .reportDirectory(\"build/process-test-coverage\")\n            .build();\n}\n</code></pre>"},{"location":"user-guide/configuration.html#maven-aggregation-plugin","title":"Maven aggregation plugin","text":"<p>For the maven aggregation plugin the report directory can be changed via the plugin configuration. It's also possible to configure the output directory for the aggregation report inside the report directory (by default it's \"all\").</p> <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n    &lt;artifactId&gt;camunda-process-test-coverage-report-aggregator-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;@project.version@&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;aggregate-reports&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;aggregate&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;reportDirectory&gt;build/camunda-tests&lt;/reportDirectory&gt;\n                &lt;outputDirectory&gt;aggregation&lt;/outputDirectory&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>"},{"location":"user-guide/configuration.html#gradle-aggregation-plugin","title":"Gradle aggregation plugin","text":"<p>For the gradle plugin it's also possible to change the report directory as well as the output directory for the  aggregation report. This can be done via an extension setting in the gradle build file.</p> <pre><code>plugins {\n    id 'org.camunda.community.process_test_coverage.report-aggregator'\n}\n\naggregateProcessTestCoverage {\n    reportDirectory = 'build/camunda-tests'\n    outputDirectory = 'aggregation'\n}\n</code></pre>"},{"location":"user-guide/configuration.html#legacy-way-via-system-property","title":"Legacy way via system property","text":"<p>We still support the old way to configure the reporting directory via system property <code>camunda-process-test-coverage.target-dir-root</code>.</p>"},{"location":"user-guide/configuration.html#maven","title":"Maven","text":"<pre><code>&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n&lt;configuration&gt;\n  &lt;systemPropertyVariables&gt;\n    &lt;camunda-process-test-coverage.target-dir-root&gt;${project.build.directory}/my-coverage-reports/&lt;/camunda-process-test-coverage.target-dir-root&gt;\n  &lt;/systemPropertyVariables&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>"},{"location":"user-guide/configuration.html#gradle-kts","title":"Gradle (KTS)","text":"<pre><code>tasks {\n    withType&lt;Test&gt; {\n        systemProperties = mapOf(\n            \"camunda-process-test-coverage.target-dir-root\" to \"$buildDir/my-coverage-reports/\"\n        )\n    }\n}\n</code></pre>"},{"location":"user-guide/sonarqube.html","title":"Sonarqube","text":""},{"location":"user-guide/sonarqube.html#sonarqube-plugin","title":"Sonarqube plugin","text":"<p>A plugin for sonarqube is provided with the artifact</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.process_test_coverage&lt;/groupId&gt;\n  &lt;artifactId&gt;sonar-camunda-process-test-coverage-plugin&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-process-test-coverage.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>To install this plugin into Sonarqube please have a look at: https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/install-a-plugin/ Currently we don't provide the plugin via the marketplace, so it has to be manually installed.</p> <p>The plugin can be configured via sonar.process-test-coverage.jsonReportPaths property. This can be used to define comma separated glob patterns to find the json report files of the coverage calculation.</p> <p>The plugin adds a coverage measure for each found BPMN diagram and also an accumulated one on project level.</p> <p></p> <p></p> <p>Also a HTML for the project is added as a project report page.</p> <p></p>"}]}